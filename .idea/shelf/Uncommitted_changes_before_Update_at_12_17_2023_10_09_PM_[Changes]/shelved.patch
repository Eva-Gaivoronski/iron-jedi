Index: src/main/java/com/example/triviaApplication/models/Quiz.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.triviaApplication.models;\r\n\r\nimport jakarta.persistence.*;\r\nimport java.util.List;\r\n\r\n@Entity\r\npublic class Quiz extends BaseEntity {\r\n\r\n    private String title;\r\n    private String category;\r\n\r\n    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"quiz\")\r\n    private List <Question> questions;\r\n\r\n    public Quiz() {}\r\n\r\n    public Quiz(String title) {\r\n        this.title = title;\r\n    }\r\n\r\n    public Long getId() {\r\n        return super.getId();\r\n    }\r\n\r\n    public void setId(Long id) {\r\n        super.setId(id);\r\n    }\r\n\r\n    public String getTitle() {\r\n        return title;\r\n    }\r\n\r\n    public void setTitle(String title) {\r\n        this.title = title;\r\n    }\r\n\r\n    public List<Question> getQuestions() {\r\n        return questions;\r\n    }\r\n\r\n    public void setQuestions(List<Question> questions) {\r\n        this.questions = questions;\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/triviaApplication/models/Quiz.java b/src/main/java/com/example/triviaApplication/models/Quiz.java
--- a/src/main/java/com/example/triviaApplication/models/Quiz.java	(revision 4f2f6b9573265e465a56717391bf5b782b87656e)
+++ b/src/main/java/com/example/triviaApplication/models/Quiz.java	(date 1702872287523)
@@ -1,6 +1,8 @@
 package com.example.triviaApplication.models;
 
 import jakarta.persistence.*;
+import jakarta.validation.constraints.NotNull;
+
 import java.util.List;
 
 @Entity
@@ -8,10 +10,14 @@
 
     private String title;
     private String category;
-
-    @OneToMany(cascade = CascadeType.ALL, mappedBy = "quiz")
+    @NotNull
+    @OneToMany(mappedBy = "quiz", cascade = CascadeType.ALL)
     private List <Question> questions;
 
+    @ManyToOne // Assuming Many-to-One relationship with User
+    @JoinColumn(name = "user_id")
+    private User user;
+
     public Quiz() {}
 
     public Quiz(String title) {
@@ -41,5 +47,6 @@
     public void setQuestions(List<Question> questions) {
         this.questions = questions;
     }
+    public void setUser(User user) {this.user = user; }
 
 }
\ No newline at end of file
Index: src/main/java/com/example/triviaApplication/controllers/QuizController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.triviaApplication.controllers;\r\n\r\nimport com.example.triviaApplication.models.Quiz;\r\nimport com.example.triviaApplication.repositories.QuizRepository;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.List;\r\n//User generated quizes.\r\n@RestController\r\n@RequestMapping(\"/quizzes\")\r\npublic class QuizController {\r\n\r\n    @Autowired\r\n    private QuizRepository quizRepository;\r\n\r\n    @GetMapping\r\n    public List<Quiz> getAllQuizzes() {\r\n        return quizRepository.findAll();\r\n    }\r\n\r\n    @GetMapping(\"/{id}\")\r\n    public Quiz getQuizById(@PathVariable Long id) {\r\n        return quizRepository.findById(id).orElse(null);\r\n    }\r\n\r\n    @PostMapping\r\n    public Quiz createQuiz(@RequestBody Quiz quiz) {\r\n        return quizRepository.save(quiz);\r\n    }\r\n\r\n    @PutMapping(\"/{id}\")\r\n    public Quiz updateQuiz(@PathVariable Long id, @RequestBody Quiz updatedQuiz) {\r\n        // Implement update logic\r\n        return quizRepository.save(updatedQuiz);\r\n    }\r\n\r\n    @DeleteMapping(\"/{id}\")\r\n    public void deleteQuiz(@PathVariable Long id) {\r\n        quizRepository.deleteById(id);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/triviaApplication/controllers/QuizController.java b/src/main/java/com/example/triviaApplication/controllers/QuizController.java
--- a/src/main/java/com/example/triviaApplication/controllers/QuizController.java	(revision 4f2f6b9573265e465a56717391bf5b782b87656e)
+++ b/src/main/java/com/example/triviaApplication/controllers/QuizController.java	(date 1702871139622)
@@ -1,19 +1,28 @@
 package com.example.triviaApplication.controllers;
 
 import com.example.triviaApplication.models.Quiz;
+import com.example.triviaApplication.models.User;
 import com.example.triviaApplication.repositories.QuizRepository;
+import com.example.triviaApplication.repositories.UserRepository;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.web.bind.annotation.*;
 
 import java.util.List;
-//User generated quizes.
+
+//User generated
 @RestController
-@RequestMapping("/quizzes")
+@RequestMapping("/quiz")
 public class QuizController {
 
     @Autowired
     private QuizRepository quizRepository;
 
+    @Autowired
+    private UserRepository userRepository;
+
+//    @Autowired
+//    private UserService userService; // For user lookup if needed
+
     @GetMapping
     public List<Quiz> getAllQuizzes() {
         return quizRepository.findAll();
@@ -25,8 +34,16 @@
     }
 
     @PostMapping
-    public Quiz createQuiz(@RequestBody Quiz quiz) {
-        return quizRepository.save(quiz);
+    public Quiz createQuiz(@RequestBody Quiz newQuiz, @RequestParam Long userId) {
+        User user = userRepository.findById(userId).orElse(null);
+
+        if (user != null) {
+            newQuiz.setUser(user);
+            return quizRepository.save(newQuiz);
+        } else {
+            // Handle the case where the user with the given ID is not found
+            return null;
+        }
     }
 
     @PutMapping("/{id}")
@@ -35,8 +52,41 @@
         return quizRepository.save(updatedQuiz);
     }
 
-    @DeleteMapping("/{id}")
-    public void deleteQuiz(@PathVariable Long id) {
-        quizRepository.deleteById(id);
+    @DeleteMapping("/user/{userId}/{quizId}")
+    public void deleteUserQuiz(@PathVariable Long userId, @PathVariable Long quizId) {
+        // Delete a specific quiz associated with a user
+        quizRepository.deleteByIdAndUserId(quizId, userId);
     }
 }
+//@RestController
+//@RequestMapping("/quiz")
+//public class QuizController {
+//
+//    @Autowired
+//    private QuizRepository quizRepository;
+//
+//    @GetMapping
+//    public List<Quiz> getAllQuizzes() {
+//        return quizRepository.findAll();
+//    }
+//
+//    @GetMapping("/{id}")
+//    public Quiz getQuizById(@PathVariable Long id) {
+//        return quizRepository.findById(id).orElse(null);
+//    }
+//
+//    @PostMapping
+//    public Quiz createQuiz(@RequestBody Quiz quiz) {
+//        return quizRepository.save(quiz);
+//    }
+//
+//    @PutMapping("/{id}")
+//    public Quiz updateQuiz(@PathVariable Long id, @RequestBody Quiz updatedQuiz) {
+//        return quizRepository.save(updatedQuiz);
+//    }
+//
+//    @DeleteMapping("/{id}")
+//    public void deleteQuiz(@PathVariable Long id) {
+//        quizRepository.deleteById(id);
+//    }
+//}
Index: src/main/java/com/example/triviaApplication/repositories/QuizRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.triviaApplication.repositories;\r\n\r\nimport com.example.triviaApplication.models.Quiz;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\npublic interface QuizRepository extends JpaRepository<Quiz, Long> {\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/triviaApplication/repositories/QuizRepository.java b/src/main/java/com/example/triviaApplication/repositories/QuizRepository.java
--- a/src/main/java/com/example/triviaApplication/repositories/QuizRepository.java	(revision 4f2f6b9573265e465a56717391bf5b782b87656e)
+++ b/src/main/java/com/example/triviaApplication/repositories/QuizRepository.java	(date 1702871807413)
@@ -2,6 +2,26 @@
 
 import com.example.triviaApplication.models.Quiz;
 import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Modifying;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.query.Param;
+import org.springframework.stereotype.Repository;
 
+import java.util.List;
+
+@Repository
 public interface QuizRepository extends JpaRepository<Quiz, Long> {
+    List<Quiz> findByUserId(Long userId);
+
+    List<Quiz> findByUserIdAndCategory(Long userId, String category);
+
+    List<String> findTitlesByUserId(Long userId);
+
+    List<String> findTitlesByUserIdAndCategory(Long userId, String category);
+
+    List<String> findDistinctCategories();
+
+    @Modifying
+    @Query("DELETE FROM Quiz q WHERE q.id = :quizId AND q.user.id = :userId")
+    void deleteByIdAndUserId(@Param("quizId") Long quizId, @Param("userId") Long userId);
 }
\ No newline at end of file
Index: client/src/QuizPage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/QuizPage.jsx b/client/src/QuizPage.jsx
new file mode 100644
--- /dev/null	(date 1702868118144)
+++ b/client/src/QuizPage.jsx	(date 1702868118144)
@@ -0,0 +1,88 @@
+import React, { useState, useEffect } from 'react';
+import { Table, Button, Modal, Form } from 'react-bootstrap';
+import { Link } from 'react-router-dom';
+import axios from 'axios';
+
+const QuizPage = () => {
+    const [userQuizzes, setUserQuizzes] = useState([]);
+    const [newQuiz, setNewQuiz] = useState({ title: '' }); // Add more fields if needed
+    const [showCreateForm, setShowCreateForm] = useState(false);
+    const [isLoading, setIsLoading] = useState(true);
+
+    useEffect(() => {
+        const fetchQuizzes = async () => {
+            setIsLoading(true);
+            try {
+                // Make an API request to fetch quizzes
+                const response = await axios.get('http://localhost:8080/quiz');
+                setUserQuizzes(response.data);
+            } catch (error) {
+                console.error('Error fetching quizzes:', error);
+            } finally {
+                setIsLoading(false);
+            }
+        };
+
+        fetchQuizzes();
+    }, []); // Empty dependency array means this effect runs once after the initial render
+
+
+    const handleCreateQuizButtonClick = () => {
+        setShowCreateForm(true);
+    };
+
+    const handleCloseCreateForm = () => {
+        setShowCreateForm(false);
+    };
+
+    const handleCreateQuiz = async () => {
+        const userId = localStorage.getItem('userId');
+        try {
+            const response = await axios.post(`http://localhost:8080/quiz`, { ...newQuiz, userId });
+            setUserQuizzes([...userQuizzes, response.data]);
+            setNewQuiz({ title: '' }); // Reset form fields after successful creation
+            handleCloseCreateForm();
+        } catch (error) {
+            console.error('Error creating quiz:', error);
+            // Handle error, e.g., show a notification to the user
+        }
+    };
+
+    return (
+        <div>
+            <Button variant="success" onClick={handleCreateQuizButtonClick}>
+                Create Quiz
+            </Button>
+
+            {/* Existing code for loading quizzes table */}
+
+            {/* Modal for creating a new quiz */}
+            <Modal show={showCreateForm} onHide={handleCloseCreateForm}>
+                <Modal.Header closeButton>
+                    <Modal.Title>Create a New Quiz</Modal.Title>
+                </Modal.Header>
+                <Modal.Body>
+                    <Form>
+                        <Form.Group controlId="formTitle">
+                            <Form.Label>Title</Form.Label>
+                            <Form.Control
+                                type="text"
+                                placeholder="Enter the title of your quiz"
+                                value={newQuiz.title}
+                                onChange={(e) => setNewQuiz({ ...newQuiz, title: e.target.value })}
+                            />
+                        </Form.Group>
+
+                        {/* Add more form fields as needed for your quiz data */}
+
+                        <Button variant="primary" onClick={handleCreateQuiz}>
+                            Create
+                        </Button>
+                    </Form>
+                </Modal.Body>
+            </Modal>
+        </div>
+    );
+};
+
+export default QuizPage;
\ No newline at end of file
Index: client/src/App.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import logo from './logo.svg';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/App.js b/client/src/App.js
--- a/client/src/App.js	(revision 4f2f6b9573265e465a56717391bf5b782b87656e)
+++ b/client/src/App.js	(date 1702868118063)
@@ -1,25 +1,29 @@
 import logo from './logo.svg';
 import './App.css';
+import QuizPage from "./QuizPage";
 
 function App() {
   return (
-    <div className="App">
-      <header className="App-header">
-        <img src={logo} className="App-logo" alt="logo" />
-        <p>
-          Edit <code>src/App.js</code> and save to reload.
-        </p>
-        <a
-          className="App-link"
-          href="https://reactjs.org"
-          target="_blank"
-          rel="noopener noreferrer"
-        >
-          Learn React
-        </a>
-      </header>
-    </div>
+      <div className="App">
+        <header className="App-header">
+          {/* You can keep or modify the logo and introductory text */}
+          <img src={logo} className="App-logo" alt="logo" />
+          <p>
+            Edit <code>src/App.js</code> and save to reload.
+          </p>
+          <a
+              className="App-link"
+              href="https://reactjs.org"
+              target="_blank"
+              rel="noopener noreferrer"
+          >
+            Learn React
+          </a>
+        </header>
+        <QuizPage />
+      </div>
   );
 }
 
 export default App;
+
Index: src/main/java/com/example/triviaApplication/models/Question.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.triviaApplication.models;\r\n\r\nimport jakarta.persistence.Entity;\r\nimport jakarta.persistence.GeneratedValue;\r\nimport jakarta.persistence.GenerationType;\r\nimport jakarta.persistence.Id;\r\n\r\n@Entity\r\npublic class Question {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n    private String text;\r\n    private String correctAnswer;\r\n    private String option1;\r\n    private String option2;\r\n    private String option3;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"user_id\", nullable = false)\r\n    private User user;\r\n\r\n    public Question() {\r\n    }\r\n\r\n    public Question(String text, String correctAnswer, String option1, String option2, String option3, User user) {\r\n        this.text = text;\r\n        this.correctAnswer = correctAnswer;\r\n        this.option1 = option1;\r\n        this.option2 = option2;\r\n        this.option3 = option3;\r\n        this.user = user;\r\n    }\r\n\r\n\r\n    public Long getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(Long id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getText() {\r\n        return text;\r\n    }\r\n\r\n    public void setText(String text) {\r\n        this.text = text;\r\n    }\r\n\r\n    public String getCorrectAnswer() {\r\n        return correctAnswer;\r\n    }\r\n\r\n    public void setCorrectAnswer(String correctAnswer) {\r\n        this.correctAnswer = correctAnswer;\r\n    }\r\n\r\n    public String getOption1() {\r\n        return option1;\r\n    }\r\n\r\n    public void setOption1(String option1) {\r\n        this.option1 = option1;\r\n    }\r\n\r\n    public String getOption2() {\r\n        return option2;\r\n    }\r\n\r\n    public void setOption2(String option2) {\r\n        this.option2 = option2;\r\n    }\r\n\r\n    public String getOption3() {\r\n        return option3;\r\n    }\r\n\r\n    public void setOption3(String option3) {\r\n        this.option3 = option3;\r\n    }\r\n\r\n    public User getUser() {\r\n        return user;\r\n    }\r\n\r\n    public void setUser(User user) {\r\n        this.user = user;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/triviaApplication/models/Question.java b/src/main/java/com/example/triviaApplication/models/Question.java
--- a/src/main/java/com/example/triviaApplication/models/Question.java	(revision 4f2f6b9573265e465a56717391bf5b782b87656e)
+++ b/src/main/java/com/example/triviaApplication/models/Question.java	(date 1702868375145)
@@ -1,9 +1,6 @@
 package com.example.triviaApplication.models;
 
-import jakarta.persistence.Entity;
-import jakarta.persistence.GeneratedValue;
-import jakarta.persistence.GenerationType;
-import jakarta.persistence.Id;
+import jakarta.persistence.*;
 
 @Entity
 public class Question {
Index: src/main/java/com/example/triviaApplication/TriviaApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.triviaApplication;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\n\r\n@SpringBootApplication\r\npublic class TriviaApplication {\r\n\r\n    public static void main(String[] args) {\r\n\r\n        SpringApplication.run(TriviaApplication.class, args);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/triviaApplication/TriviaApplication.java b/src/main/java/com/example/triviaApplication/TriviaApplication.java
--- a/src/main/java/com/example/triviaApplication/TriviaApplication.java	(revision 4f2f6b9573265e465a56717391bf5b782b87656e)
+++ b/src/main/java/com/example/triviaApplication/TriviaApplication.java	(date 1702868118092)
@@ -2,13 +2,41 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.context.annotation.Bean;
+import org.springframework.web.servlet.config.annotation.CorsRegistry;
+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
 
 @SpringBootApplication
 public class TriviaApplication {
 
     public static void main(String[] args) {
-
         SpringApplication.run(TriviaApplication.class, args);
     }
 
+    @Bean
+    public WebMvcConfigurer corsConfigurer() {
+        return new WebMvcConfigurer() {
+            @Override
+            public void addCorsMappings(CorsRegistry registry) {
+                registry.addMapping("/quiz/**")
+                        .allowedOrigins("http://localhost:3000")
+                        .allowedMethods("GET", "POST", "PUT", "DELETE")
+                        .allowCredentials(true);
+            }
+        };
+    }
 }
+//package com.example.triviaApplication;
+//
+//import org.springframework.boot.SpringApplication;
+//import org.springframework.boot.autoconfigure.SpringBootApplication;
+//
+//@SpringBootApplication
+//public class TriviaApplication {
+//
+//    public static void main(String[] args) {
+//
+//        SpringApplication.run(TriviaApplication.class, args);
+//    }
+//
+//}
Index: src/main/java/com/example/triviaApplication/controllers/HomeController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.triviaApplication.controllers;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.Model;\r\nimport org.springframework.validation.Errors;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\n@Controller\r\npublic class HomeController {\r\n    @GetMapping(\"/\")\r\n    public String home() {\r\n        return \"index\"; // Return the name of the HTML file (index.html)\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/triviaApplication/controllers/HomeController.java b/src/main/java/com/example/triviaApplication/controllers/HomeController.java
--- a/src/main/java/com/example/triviaApplication/controllers/HomeController.java	(revision 4f2f6b9573265e465a56717391bf5b782b87656e)
+++ b/src/main/java/com/example/triviaApplication/controllers/HomeController.java	(date 1702868118168)
@@ -1,14 +1,6 @@
 package com.example.triviaApplication.controllers;
-import org.springframework.beans.factory.annotation.Autowired;
+
 import org.springframework.stereotype.Controller;
-import org.springframework.ui.Model;
-import org.springframework.validation.Errors;
-import org.springframework.web.bind.annotation.*;
-import org.springframework.web.bind.annotation.RequestMapping;
 @Controller
 public class HomeController {
-    @GetMapping("/")
-    public String home() {
-        return "index"; // Return the name of the HTML file (index.html)
-    }
 }
Index: client/package-lock.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/package-lock.json b/client/package-lock.json
--- a/client/package-lock.json	(revision 4f2f6b9573265e465a56717391bf5b782b87656e)
+++ b/client/package-lock.json	(date 1702868118343)
@@ -11,10 +11,15 @@
         "@testing-library/jest-dom": "^5.17.0",
         "@testing-library/react": "^13.4.0",
         "@testing-library/user-event": "^13.5.0",
+        "axios": "^1.6.2",
         "react": "^18.2.0",
         "react-dom": "^18.2.0",
+        "react-router-dom": "^6.21.0",
         "react-scripts": "5.0.1",
         "web-vitals": "^2.1.4"
+      },
+      "devDependencies": {
+        "react-bootstrap": "^2.9.1"
       }
     },
     "node_modules/@aashutoshrathi/word-wrap": {
@@ -3263,6 +3268,81 @@
         }
       }
     },
+    "node_modules/@popperjs/core": {
+      "version": "2.11.8",
+      "resolved": "https://registry.npmjs.org/@popperjs/core/-/core-2.11.8.tgz",
+      "integrity": "sha512-P1st0aksCrn9sGZhp8GMYwBnQsbvAWsZAX44oXNNvLHGqAOcoVxmjZiohstwQ7SqKnbR47akdNi+uleWD8+g6A==",
+      "dev": true,
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/popperjs"
+      }
+    },
+    "node_modules/@react-aria/ssr": {
+      "version": "3.9.0",
+      "resolved": "https://registry.npmjs.org/@react-aria/ssr/-/ssr-3.9.0.tgz",
+      "integrity": "sha512-Bz6BqP6ZorCme9tSWHZVmmY+s7AU8l6Vl2NUYmBzezD//fVHHfFo4lFBn5tBuAaJEm3AuCLaJQ6H2qhxNSb7zg==",
+      "dev": true,
+      "dependencies": {
+        "@swc/helpers": "^0.5.0"
+      },
+      "engines": {
+        "node": ">= 12"
+      },
+      "peerDependencies": {
+        "react": "^16.8.0 || ^17.0.0-rc.1 || ^18.0.0"
+      }
+    },
+    "node_modules/@remix-run/router": {
+      "version": "1.14.0",
+      "resolved": "https://registry.npmjs.org/@remix-run/router/-/router-1.14.0.tgz",
+      "integrity": "sha512-WOHih+ClN7N8oHk9N4JUiMxQJmRVaOxcg8w7F/oHUXzJt920ekASLI/7cYX8XkntDWRhLZtsk6LbGrkgOAvi5A==",
+      "engines": {
+        "node": ">=14.0.0"
+      }
+    },
+    "node_modules/@restart/hooks": {
+      "version": "0.4.15",
+      "resolved": "https://registry.npmjs.org/@restart/hooks/-/hooks-0.4.15.tgz",
+      "integrity": "sha512-cZFXYTxbpzYcieq/mBwSyXgqnGMHoBVh3J7MU0CCoIB4NRZxV9/TuwTBAaLMqpNhC3zTPMCgkQ5Ey07L02Xmcw==",
+      "dev": true,
+      "dependencies": {
+        "dequal": "^2.0.3"
+      },
+      "peerDependencies": {
+        "react": ">=16.8.0"
+      }
+    },
+    "node_modules/@restart/ui": {
+      "version": "1.6.6",
+      "resolved": "https://registry.npmjs.org/@restart/ui/-/ui-1.6.6.tgz",
+      "integrity": "sha512-eC3puKuWE1SRYbojWHXnvCNHGgf3uzHCb6JOhnF4OXPibOIPEkR1sqDSkL643ydigxwh+ruCa1CmYHlzk7ikKA==",
+      "dev": true,
+      "dependencies": {
+        "@babel/runtime": "^7.21.0",
+        "@popperjs/core": "^2.11.6",
+        "@react-aria/ssr": "^3.5.0",
+        "@restart/hooks": "^0.4.9",
+        "@types/warning": "^3.0.0",
+        "dequal": "^2.0.3",
+        "dom-helpers": "^5.2.0",
+        "uncontrollable": "^8.0.1",
+        "warning": "^4.0.3"
+      },
+      "peerDependencies": {
+        "react": ">=16.14.0",
+        "react-dom": ">=16.14.0"
+      }
+    },
+    "node_modules/@restart/ui/node_modules/uncontrollable": {
+      "version": "8.0.4",
+      "resolved": "https://registry.npmjs.org/uncontrollable/-/uncontrollable-8.0.4.tgz",
+      "integrity": "sha512-ulRWYWHvscPFc0QQXvyJjY6LIXU56f0h8pQFvhxiKk5V1fcI8gp9Ht9leVAhrVjzqMw0BgjspBINx9r6oyJUvQ==",
+      "dev": true,
+      "peerDependencies": {
+        "react": ">=16.14.0"
+      }
+    },
     "node_modules/@rollup/plugin-babel": {
       "version": "5.3.1",
       "resolved": "https://registry.npmjs.org/@rollup/plugin-babel/-/plugin-babel-5.3.1.tgz",
@@ -3581,6 +3661,15 @@
         "url": "https://github.com/sponsors/gregberge"
       }
     },
+    "node_modules/@swc/helpers": {
+      "version": "0.5.3",
+      "resolved": "https://registry.npmjs.org/@swc/helpers/-/helpers-0.5.3.tgz",
+      "integrity": "sha512-FaruWX6KdudYloq1AHD/4nU+UsMTdNE8CKyrseXWEcgjDAbvkwJg2QGPAnfIJLIWsjZOSPLOAykK6fuYp4vp4A==",
+      "dev": true,
+      "dependencies": {
+        "tslib": "^2.4.0"
+      }
+    },
     "node_modules/@testing-library/dom": {
       "version": "9.3.3",
       "resolved": "https://registry.npmjs.org/@testing-library/dom/-/dom-9.3.3.tgz",
@@ -4380,6 +4469,15 @@
       "integrity": "sha512-rvrT/M7Df5eykWFxn6MYt5Pem/Dbyc1N8Y0S9Mrkw2WFCRiqUgw9P7ul2NpwsXCSM1DVdENzdG9J5SreqfAIWg==",
       "dependencies": {
         "@types/react": "*"
+      }
+    },
+    "node_modules/@types/react-transition-group": {
+      "version": "4.4.10",
+      "resolved": "https://registry.npmjs.org/@types/react-transition-group/-/react-transition-group-4.4.10.tgz",
+      "integrity": "sha512-hT/+s0VQs2ojCX823m60m5f0sL5idt9SO6Tj6Dg+rdphGPIeJbJ6CxvBYkgkGKrYeDjvIpKTR38UzmtHJOGW3Q==",
+      "dev": true,
+      "dependencies": {
+        "@types/react": "*"
       }
     },
     "node_modules/@types/resolve": {
@@ -4458,6 +4556,12 @@
       "resolved": "https://registry.npmjs.org/@types/trusted-types/-/trusted-types-2.0.7.tgz",
       "integrity": "sha512-ScaPdn1dQczgbl0QFTeTOmVHFULt394XJgOQNoyVhZ6r2vLnMLJfBPd53SB52T/3G36VI1/g2MZaX0cwDuXsfw=="
     },
+    "node_modules/@types/warning": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/@types/warning/-/warning-3.0.3.tgz",
+      "integrity": "sha512-D1XC7WK8K+zZEveUPY+cf4+kgauk8N4eHr/XIHXGlGYkHLud6hK9lYfZk1ry1TNh798cZUCgb6MqGEG8DkJt6Q==",
+      "dev": true
+    },
     "node_modules/@types/ws": {
       "version": "8.5.10",
       "resolved": "https://registry.npmjs.org/@types/ws/-/ws-8.5.10.tgz",
@@ -5324,6 +5428,29 @@
         "node": ">=4"
       }
     },
+    "node_modules/axios": {
+      "version": "1.6.2",
+      "resolved": "https://registry.npmjs.org/axios/-/axios-1.6.2.tgz",
+      "integrity": "sha512-7i24Ri4pmDRfJTR7LDBhsOTtcm+9kjX5WiY1X3wIisx6G9So3pfMkEiU7emUBe46oceVImccTEM3k6C5dbVW8A==",
+      "dependencies": {
+        "follow-redirects": "^1.15.0",
+        "form-data": "^4.0.0",
+        "proxy-from-env": "^1.1.0"
+      }
+    },
+    "node_modules/axios/node_modules/form-data": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
+      "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
+      "dependencies": {
+        "asynckit": "^0.4.0",
+        "combined-stream": "^1.0.8",
+        "mime-types": "^2.1.12"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
     "node_modules/axobject-query": {
       "version": "3.2.1",
       "resolved": "https://registry.npmjs.org/axobject-query/-/axobject-query-3.2.1.tgz",
@@ -5994,6 +6121,12 @@
       "resolved": "https://registry.npmjs.org/cjs-module-lexer/-/cjs-module-lexer-1.2.3.tgz",
       "integrity": "sha512-0TNiGstbQmCFwt4akjjBg5pLRTSyj/PkWQ1ZoO2zntmg9yLqSRxwEa4iCfQLGjqhiqBfOJa7W/E8wfGrTDmlZQ=="
     },
+    "node_modules/classnames": {
+      "version": "2.3.2",
+      "resolved": "https://registry.npmjs.org/classnames/-/classnames-2.3.2.tgz",
+      "integrity": "sha512-CSbhY4cFEJRe6/GQzIk5qXZ4Jeg5pcsP7b5peFSDpffpe1cqjASH/n9UTjBwOp6XpMSTwQ8Za2K5V02ueA7Tmw==",
+      "dev": true
+    },
     "node_modules/clean-css": {
       "version": "5.3.3",
       "resolved": "https://registry.npmjs.org/clean-css/-/clean-css-5.3.3.tgz",
@@ -6959,6 +7092,16 @@
         "utila": "~0.4"
       }
     },
+    "node_modules/dom-helpers": {
+      "version": "5.2.1",
+      "resolved": "https://registry.npmjs.org/dom-helpers/-/dom-helpers-5.2.1.tgz",
+      "integrity": "sha512-nRCa7CK3VTrM2NmGkIy4cbK7IZlgBE/PYMn55rrXefr5xXDP0LdtfPnblFDoVdcAfslJ7or6iqAUnx0CCGIWQA==",
+      "dev": true,
+      "dependencies": {
+        "@babel/runtime": "^7.8.7",
+        "csstype": "^3.0.2"
+      }
+    },
     "node_modules/dom-serializer": {
       "version": "1.4.1",
       "resolved": "https://registry.npmjs.org/dom-serializer/-/dom-serializer-1.4.1.tgz",
@@ -9324,6 +9467,15 @@
         "node": ">= 0.4"
       }
     },
+    "node_modules/invariant": {
+      "version": "2.2.4",
+      "resolved": "https://registry.npmjs.org/invariant/-/invariant-2.2.4.tgz",
+      "integrity": "sha512-phJfQVBuaJM5raOpJjSfkiD6BpbCE4Ns//LaXl6wGYtUBY83nWS6Rf9tXm2e8VaK60JEjYldbPif/A2B1C2gNA==",
+      "dev": true,
+      "dependencies": {
+        "loose-envify": "^1.0.0"
+      }
+    },
     "node_modules/ipaddr.js": {
       "version": "2.1.0",
       "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-2.1.0.tgz",
@@ -14422,6 +14574,25 @@
         "react-is": "^16.13.1"
       }
     },
+    "node_modules/prop-types-extra": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/prop-types-extra/-/prop-types-extra-1.1.1.tgz",
+      "integrity": "sha512-59+AHNnHYCdiC+vMwY52WmvP5dM3QLeoumYuEyceQDi9aEhtwN9zIQ2ZNo25sMyXnbh32h+P1ezDsUpUH3JAew==",
+      "dev": true,
+      "dependencies": {
+        "react-is": "^16.3.2",
+        "warning": "^4.0.0"
+      },
+      "peerDependencies": {
+        "react": ">=0.14.0"
+      }
+    },
+    "node_modules/prop-types-extra/node_modules/react-is": {
+      "version": "16.13.1",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
+      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==",
+      "dev": true
+    },
     "node_modules/prop-types/node_modules/react-is": {
       "version": "16.13.1",
       "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
@@ -14447,6 +14618,11 @@
         "node": ">= 0.10"
       }
     },
+    "node_modules/proxy-from-env": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
+      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg=="
+    },
     "node_modules/psl": {
       "version": "1.9.0",
       "resolved": "https://registry.npmjs.org/psl/-/psl-1.9.0.tgz",
@@ -14596,6 +14772,36 @@
       "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.13.11.tgz",
       "integrity": "sha512-kY1AZVr2Ra+t+piVaJ4gxaFaReZVH40AKNo7UCX6W+dEwBo/2oZJzqfuN1qLq1oL45o56cPaTXELwrTh8Fpggg=="
     },
+    "node_modules/react-bootstrap": {
+      "version": "2.9.1",
+      "resolved": "https://registry.npmjs.org/react-bootstrap/-/react-bootstrap-2.9.1.tgz",
+      "integrity": "sha512-ezgmh/ARCYp18LbZEqPp0ppvy+ytCmycDORqc8vXSKYV3cer4VH7OReV8uMOoKXmYzivJTxgzGHalGrHamryHA==",
+      "dev": true,
+      "dependencies": {
+        "@babel/runtime": "^7.22.5",
+        "@restart/hooks": "^0.4.9",
+        "@restart/ui": "^1.6.6",
+        "@types/react-transition-group": "^4.4.6",
+        "classnames": "^2.3.2",
+        "dom-helpers": "^5.2.1",
+        "invariant": "^2.2.4",
+        "prop-types": "^15.8.1",
+        "prop-types-extra": "^1.1.0",
+        "react-transition-group": "^4.4.5",
+        "uncontrollable": "^7.2.1",
+        "warning": "^4.0.3"
+      },
+      "peerDependencies": {
+        "@types/react": ">=16.14.8",
+        "react": ">=16.14.0",
+        "react-dom": ">=16.14.0"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
     "node_modules/react-dev-utils": {
       "version": "12.0.1",
       "resolved": "https://registry.npmjs.org/react-dev-utils/-/react-dev-utils-12.0.1.tgz",
@@ -14735,6 +14941,12 @@
       "resolved": "https://registry.npmjs.org/react-is/-/react-is-17.0.2.tgz",
       "integrity": "sha512-w2GsyukL62IJnlaff/nRegPQR94C/XXamvMWmSHRJ4y7Ts/4ocGRmTHvOs8PSE6pB3dWOrD/nueuU5sduBsQ4w=="
     },
+    "node_modules/react-lifecycles-compat": {
+      "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/react-lifecycles-compat/-/react-lifecycles-compat-3.0.4.tgz",
+      "integrity": "sha512-fBASbA6LnOU9dOU2eW7aQ8xmYBSXUIWr+UmF9b1efZBazGNO+rcXT/icdKnYm2pTwcRylVUYwW7H1PHfLekVzA==",
+      "dev": true
+    },
     "node_modules/react-refresh": {
       "version": "0.11.0",
       "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.11.0.tgz",
@@ -14743,6 +14955,36 @@
         "node": ">=0.10.0"
       }
     },
+    "node_modules/react-router": {
+      "version": "6.21.0",
+      "resolved": "https://registry.npmjs.org/react-router/-/react-router-6.21.0.tgz",
+      "integrity": "sha512-hGZ0HXbwz3zw52pLZV3j3+ec+m/PQ9cTpBvqjFQmy2XVUWGn5MD+31oXHb6dVTxYzmAeaiUBYjkoNz66n3RGCg==",
+      "dependencies": {
+        "@remix-run/router": "1.14.0"
+      },
+      "engines": {
+        "node": ">=14.0.0"
+      },
+      "peerDependencies": {
+        "react": ">=16.8"
+      }
+    },
+    "node_modules/react-router-dom": {
+      "version": "6.21.0",
+      "resolved": "https://registry.npmjs.org/react-router-dom/-/react-router-dom-6.21.0.tgz",
+      "integrity": "sha512-1dUdVj3cwc1npzJaf23gulB562ESNvxf7E4x8upNJycqyUm5BRRZ6dd3LrlzhtLaMrwOCO8R0zoiYxdaJx4LlQ==",
+      "dependencies": {
+        "@remix-run/router": "1.14.0",
+        "react-router": "6.21.0"
+      },
+      "engines": {
+        "node": ">=14.0.0"
+      },
+      "peerDependencies": {
+        "react": ">=16.8",
+        "react-dom": ">=16.8"
+      }
+    },
     "node_modules/react-scripts": {
       "version": "5.0.1",
       "resolved": "https://registry.npmjs.org/react-scripts/-/react-scripts-5.0.1.tgz",
@@ -14815,6 +15057,22 @@
         }
       }
     },
+    "node_modules/react-transition-group": {
+      "version": "4.4.5",
+      "resolved": "https://registry.npmjs.org/react-transition-group/-/react-transition-group-4.4.5.tgz",
+      "integrity": "sha512-pZcd1MCJoiKiBR2NRxeCRg13uCXbydPnmB4EOeRrY7480qNWO8IIgQG6zlDkm6uRMsURXPuKq0GWtiM59a5Q6g==",
+      "dev": true,
+      "dependencies": {
+        "@babel/runtime": "^7.5.5",
+        "dom-helpers": "^5.0.1",
+        "loose-envify": "^1.4.0",
+        "prop-types": "^15.6.2"
+      },
+      "peerDependencies": {
+        "react": ">=16.6.0",
+        "react-dom": ">=16.6.0"
+      }
+    },
     "node_modules/read-cache": {
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/read-cache/-/read-cache-1.0.0.tgz",
@@ -16756,6 +17014,21 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
+    "node_modules/uncontrollable": {
+      "version": "7.2.1",
+      "resolved": "https://registry.npmjs.org/uncontrollable/-/uncontrollable-7.2.1.tgz",
+      "integrity": "sha512-svtcfoTADIB0nT9nltgjujTi7BzVmwjZClOmskKu/E8FW9BXzg9os8OLr4f8Dlnk0rYWJIWr4wv9eKUXiQvQwQ==",
+      "dev": true,
+      "dependencies": {
+        "@babel/runtime": "^7.6.3",
+        "@types/react": ">=16.9.11",
+        "invariant": "^2.2.4",
+        "react-lifecycles-compat": "^3.0.4"
+      },
+      "peerDependencies": {
+        "react": ">=15.0.0"
+      }
+    },
     "node_modules/underscore": {
       "version": "1.12.1",
       "resolved": "https://registry.npmjs.org/underscore/-/underscore-1.12.1.tgz",
@@ -16983,6 +17256,15 @@
         "makeerror": "1.0.12"
       }
     },
+    "node_modules/warning": {
+      "version": "4.0.3",
+      "resolved": "https://registry.npmjs.org/warning/-/warning-4.0.3.tgz",
+      "integrity": "sha512-rpJyN222KWIvHJ/F53XSZv0Zl/accqHR8et1kpaMTD/fLCRxtV8iX8czMzY7sVZupTI3zcUTg8eycS2kNF9l6w==",
+      "dev": true,
+      "dependencies": {
+        "loose-envify": "^1.0.0"
+      }
+    },
     "node_modules/watchpack": {
       "version": "2.4.0",
       "resolved": "https://registry.npmjs.org/watchpack/-/watchpack-2.4.0.tgz",
Index: client/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"name\": \"client\",\r\n  \"version\": \"0.1.0\",\r\n  \"private\": true,\r\n  \"dependencies\": {\r\n    \"@testing-library/jest-dom\": \"^5.17.0\",\r\n    \"@testing-library/react\": \"^13.4.0\",\r\n    \"@testing-library/user-event\": \"^13.5.0\",\r\n    \"react\": \"^18.2.0\",\r\n    \"react-dom\": \"^18.2.0\",\r\n    \"react-scripts\": \"5.0.1\",\r\n    \"web-vitals\": \"^2.1.4\"\r\n  },\r\n  \"scripts\": {\r\n    \"start\": \"react-scripts start\",\r\n    \"build\": \"react-scripts build\",\r\n    \"test\": \"react-scripts test\",\r\n    \"eject\": \"react-scripts eject\"\r\n  },\r\n  \"eslintConfig\": {\r\n    \"extends\": [\r\n      \"react-app\",\r\n      \"react-app/jest\"\r\n    ]\r\n  },\r\n  \"browserslist\": {\r\n    \"production\": [\r\n      \">0.2%\",\r\n      \"not dead\",\r\n      \"not op_mini all\"\r\n    ],\r\n    \"development\": [\r\n      \"last 1 chrome version\",\r\n      \"last 1 firefox version\",\r\n      \"last 1 safari version\"\r\n    ]\r\n  },\r\n  \"proxy\": \"http://localhost:8080\"\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/package.json b/client/package.json
--- a/client/package.json	(revision 4f2f6b9573265e465a56717391bf5b782b87656e)
+++ b/client/package.json	(date 1702868230644)
@@ -6,8 +6,10 @@
     "@testing-library/jest-dom": "^5.17.0",
     "@testing-library/react": "^13.4.0",
     "@testing-library/user-event": "^13.5.0",
+    "axios": "^1.6.2",
     "react": "^18.2.0",
     "react-dom": "^18.2.0",
+    "react-router-dom": "^6.21.0",
     "react-scripts": "5.0.1",
     "web-vitals": "^2.1.4"
   },
@@ -35,5 +37,8 @@
       "last 1 safari version"
     ]
   },
-  "proxy": "http://localhost:8080"
+  "proxy": "http://localhost:8080",
+  "devDependencies": {
+    "react-bootstrap": "^2.9.1"
+  }
 }
