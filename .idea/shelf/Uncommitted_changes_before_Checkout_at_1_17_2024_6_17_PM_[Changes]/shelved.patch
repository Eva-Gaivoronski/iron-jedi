Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"843f8013-a532-4783-ad37-5c6a94f5ae86\" name=\"Changes\" comment=\"saving previous score, able to create, update, take and delete quiz. Add questions strictly from question form\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_1_7_2024_7_25_PM__Changes_.xml\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_1_8_2024_9_29_AM__Changes_.xml\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_1_8_2024_9_58_AM__Changes_.xml\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/client/src/components/QuizPage.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/client/src/components/QuizPage.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/triviaApplication/controllers/QuizController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/triviaApplication/controllers/QuizController.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"ExternalProjectsManager\">\r\n    <system id=\"GRADLE\">\r\n      <state>\r\n        <task path=\"$PROJECT_DIR$\">\r\n          <activation />\r\n        </task>\r\n        <projects_view>\r\n          <tree_state>\r\n            <expand>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"TriviaApplication\" type=\"f1a62948:ProjectNode\" />\r\n              </path>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"TriviaApplication\" type=\"f1a62948:ProjectNode\" />\r\n                <item name=\"Tasks\" type=\"e4a08cd1:TasksNode\" />\r\n              </path>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"TriviaApplication\" type=\"f1a62948:ProjectNode\" />\r\n                <item name=\"Tasks\" type=\"e4a08cd1:TasksNode\" />\r\n                <item name=\"application\" type=\"c8890929:TasksNode$1\" />\r\n              </path>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"TriviaApplication\" type=\"f1a62948:ProjectNode\" />\r\n                <item name=\"Tasks\" type=\"e4a08cd1:TasksNode\" />\r\n                <item name=\"build\" type=\"c8890929:TasksNode$1\" />\r\n              </path>\r\n            </expand>\r\n            <select />\r\n          </tree_state>\r\n        </projects_view>\r\n      </state>\r\n    </system>\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"module-info\" />\r\n        <option value=\"JavaScript File\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"PUSH_TAGS\">\r\n      <GitPushTagMode>\r\n        <option name=\"argument\" value=\"--follow-tags\" />\r\n        <option name=\"title\" value=\"Current Branch\" />\r\n      </GitPushTagMode>\r\n    </option>\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"RESET_MODE\" value=\"HARD\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 6\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2ZS5sEXvZAKePLdxEqFpzIDa0cl\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\r\n    &quot;Gradle.TriviaApp [bootRun].executor&quot;: &quot;Run&quot;,\r\n    &quot;Gradle.TriviaApp [bootTestRun].executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;Iryna's__branch&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\r\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/Kevin/Desktop/Launchcode Class files/Java Projects/assignment-one&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;inlay.hints&quot;,\r\n    &quot;ts.external.directory.path&quot;: &quot;C:\\\\Program Files\\\\JetBrains\\\\IntelliJ IDEA 2023.3\\\\plugins\\\\javascript-impl\\\\jsLanguageServicesImpl\\\\external&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ReactDesignerToolWindowState\">\r\n    <option name=\"myId2Visible\">\r\n      <map>\r\n        <entry key=\"com.intellij.reactbuddy.reactComponents\" value=\"false\" />\r\n        <entry key=\"com.intellij.reactbuddy.reactInspector\" value=\"false\" />\r\n        <entry key=\"com.intellij.reactbuddy.storybook\" value=\"false\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"ReactorSettings\">\r\n    <option name=\"notificationShown\" value=\"true\" />\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Gradle.TriviaApp [bootRun]\">\r\n    <configuration name=\"TriviaApp [bootRun]\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\"bootRun\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <RunAsTest>false</RunAsTest>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"TriviaApp [bootTestRun]\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\"bootTestRun\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <RunAsTest>false</RunAsTest>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"TriviaApplication\" type=\"SpringBootApplicationConfigurationType\" factoryName=\"Spring Boot\" nameIsGenerated=\"true\">\r\n      <option name=\"FRAME_DEACTIVATION_UPDATE_POLICY\" value=\"UpdateClassesAndResources\" />\r\n      <module name=\"TriviaApplication.main\" />\r\n      <option name=\"SPRING_BOOT_MAIN_CLASS\" value=\"com.example.triviaApplication.TriviaApplication\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Gradle.TriviaApp [bootRun]\" />\r\n        <item itemvalue=\"Gradle.TriviaApp [bootTestRun]\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"jdk-17.0.9-corretto-17.0.9-3183f394aec4-8f899f12\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"843f8013-a532-4783-ad37-5c6a94f5ae86\" name=\"Changes\" comment=\"\" />\r\n      <created>1702402851272</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1702402851272</updated>\r\n      <workItem from=\"1703093873019\" duration=\"851000\" />\r\n      <workItem from=\"1703094748044\" duration=\"1442000\" />\r\n      <workItem from=\"1703096721883\" duration=\"2305000\" />\r\n      <workItem from=\"1703610639375\" duration=\"17615000\" />\r\n      <workItem from=\"1703641886814\" duration=\"42000\" />\r\n      <workItem from=\"1703644946658\" duration=\"2754000\" />\r\n      <workItem from=\"1703779769042\" duration=\"7561000\" />\r\n      <workItem from=\"1703896442163\" duration=\"5402000\" />\r\n      <workItem from=\"1703956347241\" duration=\"246000\" />\r\n      <workItem from=\"1703959471067\" duration=\"5208000\" />\r\n      <workItem from=\"1704052422689\" duration=\"2326000\" />\r\n      <workItem from=\"1704060202133\" duration=\"618000\" />\r\n      <workItem from=\"1704065578697\" duration=\"2124000\" />\r\n      <workItem from=\"1704070267338\" duration=\"1514000\" />\r\n      <workItem from=\"1704147566283\" duration=\"11646000\" />\r\n      <workItem from=\"1704166117418\" duration=\"2795000\" />\r\n      <workItem from=\"1704205081877\" duration=\"2672000\" />\r\n      <workItem from=\"1704207818295\" duration=\"4392000\" />\r\n      <workItem from=\"1704227071534\" duration=\"2846000\" />\r\n      <workItem from=\"1704250948851\" duration=\"3453000\" />\r\n      <workItem from=\"1704328669018\" duration=\"6789000\" />\r\n      <workItem from=\"1704396672975\" duration=\"2677000\" />\r\n      <workItem from=\"1704686893271\" duration=\"2152000\" />\r\n      <workItem from=\"1704729397051\" duration=\"1253000\" />\r\n      <workItem from=\"1704818487608\" duration=\"17364000\" />\r\n      <workItem from=\"1704852465816\" duration=\"1564000\" />\r\n      <workItem from=\"1704858465100\" duration=\"5132000\" />\r\n      <workItem from=\"1704902098040\" duration=\"4147000\" />\r\n      <workItem from=\"1704909563098\" duration=\"2866000\" />\r\n      <workItem from=\"1704989167054\" duration=\"5119000\" />\r\n      <workItem from=\"1705016862476\" duration=\"4045000\" />\r\n      <workItem from=\"1705028908016\" duration=\"496000\" />\r\n      <workItem from=\"1705080586970\" duration=\"4093000\" />\r\n      <workItem from=\"1705164649934\" duration=\"18338000\" />\r\n      <workItem from=\"1705195960872\" duration=\"4064000\" />\r\n      <workItem from=\"1705248318453\" duration=\"13695000\" />\r\n      <workItem from=\"1705348967608\" duration=\"945000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"update and chages after fetching Kevins code\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1703610736990</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703610736990</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"now we can create, save and delete quiz. working on editing\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1703800150805</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703800150805</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"edded adit quiz - we can now change the title and category and save it\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1703961840315</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703961840315</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"more changes\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704066989340</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704066989340</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"cleaned code for better clarity and this is the last comit before start working on &quot;take quiz&quot; task\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704155094457</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704155094457</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"working on &quot;Take Quiz&quot; functionality\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704248949362</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704248949363</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"don't merge this commit. I'm working on issue quiz/question issue\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704840235633</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704840235633</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"made the question saved to quiz\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704859376993</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704859376993</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"fixed the questions saved to quiz. working on quiz taking issue\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704906605325</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704906605325</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\" working on quiz question\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704992063685</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704992063685</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"adding questions\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704994477425</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704994477425</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Fixed adding questions. Started Validation\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705012852606</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705012852606</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Fixed adding questions\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705018172106</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705018172106</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"working on pages\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705111025966</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705111025966</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"added a little styling\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705169798315</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705169798315</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"added Validation for Spring and corrected errors for React\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705175751860</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705175751860</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"added ability to take quiz multiple times\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705183085238</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705183085238</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"added ability to save multiple attempts results\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705185064047</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705185064047</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"added attempts score to takequiz page\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705188148325</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705188148325</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"saving previous score, able to create, update, take and delete quiz. Add questions strictly from question form\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705341981925</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705341981925</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"21\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"update and chages after fetching Kevins code\" />\r\n    <MESSAGE value=\"now we can create, save and delete quiz. working on editing\" />\r\n    <MESSAGE value=\"edded adit quiz - we can now change the title and category and save it\" />\r\n    <MESSAGE value=\"more changes\" />\r\n    <MESSAGE value=\"cleaned code for better clarity and this is the last comit before start working on &quot;take quiz&quot; task\" />\r\n    <MESSAGE value=\"working on &quot;Take Quiz&quot; functionality\" />\r\n    <MESSAGE value=\"don't merge this commit. I'm working on issue quiz/question issue\" />\r\n    <MESSAGE value=\"made the question saved to quiz\" />\r\n    <MESSAGE value=\"fixed the questions saved to quiz. working on quiz taking issue\" />\r\n    <MESSAGE value=\" working on quiz question\" />\r\n    <MESSAGE value=\"adding questions\" />\r\n    <MESSAGE value=\"Fixed adding questions. Started Validation\" />\r\n    <MESSAGE value=\"Fixed adding questions\" />\r\n    <MESSAGE value=\"working on pages\" />\r\n    <MESSAGE value=\"added a little styling\" />\r\n    <MESSAGE value=\"added Validation for Spring and corrected errors for React\" />\r\n    <MESSAGE value=\"added ability to take quiz multiple times\" />\r\n    <MESSAGE value=\"added ability to save multiple attempts results\" />\r\n    <MESSAGE value=\"added attempts score to takequiz page\" />\r\n    <MESSAGE value=\"saving previous score, able to create, update, take and delete quiz. Add questions strictly from question form\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"saving previous score, able to create, update, take and delete quiz. Add questions strictly from question form\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <breakpoint enabled=\"true\" type=\"java-exception\">\r\n          <properties class=\"org.hibernate.NonUniqueResultException\" package=\"org.hibernate\" />\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 55779d743e046c39dc482aae7d3d12a891383162)
+++ b/.idea/workspace.xml	(date 1705536647663)
@@ -5,12 +5,8 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="843f8013-a532-4783-ad37-5c6a94f5ae86" name="Changes" comment="saving previous score, able to create, update, take and delete quiz. Add questions strictly from question form">
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_1_7_2024_7_25_PM__Changes_.xml" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_1_8_2024_9_29_AM__Changes_.xml" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_1_8_2024_9_58_AM__Changes_.xml" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/client/src/components/QuizPage.js" beforeDir="false" afterPath="$PROJECT_DIR$/client/src/components/QuizPage.js" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/triviaApplication/controllers/QuizController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/triviaApplication/controllers/QuizController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/src/components/QuestionForm.js" beforeDir="false" afterPath="$PROJECT_DIR$/client/src/components/QuestionForm.js" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -30,29 +26,7 @@
         </task>
         <projects_view>
           <tree_state>
-            <expand>
-              <path>
-                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
-                <item name="TriviaApplication" type="f1a62948:ProjectNode" />
-              </path>
-              <path>
-                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
-                <item name="TriviaApplication" type="f1a62948:ProjectNode" />
-                <item name="Tasks" type="e4a08cd1:TasksNode" />
-              </path>
-              <path>
-                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
-                <item name="TriviaApplication" type="f1a62948:ProjectNode" />
-                <item name="Tasks" type="e4a08cd1:TasksNode" />
-                <item name="application" type="c8890929:TasksNode$1" />
-              </path>
-              <path>
-                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
-                <item name="TriviaApplication" type="f1a62948:ProjectNode" />
-                <item name="Tasks" type="e4a08cd1:TasksNode" />
-                <item name="build" type="c8890929:TasksNode$1" />
-              </path>
-            </expand>
+            <expand />
             <select />
           </tree_state>
         </projects_view>
@@ -78,7 +52,7 @@
     </option>
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
-        <entry key="$PROJECT_DIR$" value="main" />
+        <entry key="$PROJECT_DIR$" value="kevin_branch" />
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
@@ -99,26 +73,26 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,
-    &quot;Gradle.TriviaApp [bootRun].executor&quot;: &quot;Run&quot;,
-    &quot;Gradle.TriviaApp [bootTestRun].executor&quot;: &quot;Run&quot;,
-    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;git-widget-placeholder&quot;: &quot;Iryna's__branch&quot;,
-    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,
-    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
-    &quot;last_opened_file_path&quot;: &quot;C:/Users/Kevin/Desktop/Launchcode Class files/Java Projects/assignment-one&quot;,
-    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
-    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
-    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
-    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
-    &quot;settings.editor.selected.configurable&quot;: &quot;inlay.hints&quot;,
-    &quot;ts.external.directory.path&quot;: &quot;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2023.3\\plugins\\javascript-impl\\jsLanguageServicesImpl\\external&quot;,
-    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "ASKED_ADD_EXTERNAL_FILES": "true",
+    "Gradle.TriviaApp [bootRun].executor": "Run",
+    "Gradle.TriviaApp [bootTestRun].executor": "Run",
+    "RunOnceActivity.OpenProjectViewOnStart": "true",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "git-widget-placeholder": "Iryna's__branch",
+    "ignore.virus.scanning.warn.message": "true",
+    "kotlin-language-version-configured": "true",
+    "last_opened_file_path": "C:/Users/Kevin/Desktop/Launchcode Class files/Java Projects/assignment-one",
+    "node.js.detected.package.eslint": "true",
+    "node.js.selected.package.eslint": "(autodetect)",
+    "node.js.selected.package.tslint": "(autodetect)",
+    "nodejs_package_manager_path": "npm",
+    "settings.editor.selected.configurable": "inlay.hints",
+    "ts.external.directory.path": "C:\\Program Files\\JetBrains\\IntelliJ IDEA 2023.3\\plugins\\javascript-impl\\jsLanguageServicesImpl\\external",
+    "vue.rearranger.settings.migration": "true"
   }
-}</component>
+}]]></component>
   <component name="ReactDesignerToolWindowState">
     <option name="myId2Visible">
       <map>
Index: client/src/components/QuestionForm.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, {useEffect, useState} from 'react';\r\nimport './QuestionForm.css';\r\nimport axios from \"axios\";\r\nimport {useNavigate, useParams} from \"react-router-dom\";\r\n\r\nfunction QuestionForm() {\r\n    const [username, setUsername] = useState('');\r\n    const [questionText, setQuestionText] = useState('');\r\n    const [answers, setAnswers] = useState(new Array(4).fill({ text: '', isCorrect: false }));\r\n    const [correctAnswerIndex, setCorrectAnswerIndex] = useState(-1);\r\n    const [userQuestions, setUserQuestions] = useState([]);\r\n    const [searchUsername, setSearchUsername] = useState('');\r\n    const {quizId} = useParams();\r\n    const [keyword, setKeyword] = useState('');\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [editQuestionId, setEditQuestionId] = useState(null);\r\n    const [keywordSearchUsername, setKeywordSearchUsername] = useState('');\r\n\r\n    const handleAnswerChange = (index, event) => {\r\n        const newAnswers = answers.map((answer, i) => {\r\n            if (i === index) {\r\n                return { ...answer, text: event.target.value };\r\n            }\r\n            return answer;\r\n        });\r\n        setAnswers(newAnswers);\r\n    };\r\n\r\n    const handleCorrectAnswerChange = (index) => {\r\n        const updatedAnswers = answers.map((answer, i) => ({\r\n            ...answer,\r\n            isCorrect: i === index\r\n        }));\r\n        setAnswers(updatedAnswers);\r\n        setCorrectAnswerIndex(index);\r\n    };\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        if (!username || !questionText || answers.some(answer => !answer.text)) {\r\n            alert('Please fill out all fields.');\r\n            return;\r\n        }\r\n\r\n        //Iryna added validation for correct answer checked\r\n        if (correctAnswerIndex === -1) {\r\n            alert('Please select at least one correct answer.');\r\n            return;\r\n        }\r\n\r\n        const questionData = {\r\n            user: { username },\r\n            text: questionText,\r\n            answers\r\n        };\r\n\r\n        try {\r\n            //Iryna changed\r\n            const response =  axios.post('http://localhost:8080/question', questionData)\r\n                // Iryna added\r\n                .then(responseData => {\r\n                    if (responseData.data != null && responseData.data.id !=null){\r\n                        if (quizId !=null) {\r\n                            axios.post(`/quiz/addQuestion/${quizId}`, responseData.data.id.toString());\r\n                        }\r\n                    }\r\n                });\r\n            //Iryna end\r\n\r\n            alert('Question saved successfully!');\r\n            setUsername('');\r\n            setQuestionText('');\r\n            setAnswers(new Array(4).fill({ text: '', isCorrect: false }));\r\n            setCorrectAnswerIndex(-1);\r\n        } catch (error) {\r\n            console.error('There was an error saving the question:', error);\r\n            alert('Error saving question.');\r\n        }\r\n    };\r\n    const handleSearch = async () => {\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/users/${searchUsername}/questions`);\r\n            if (!response.ok) { throw new Error(`HTTP error! Status: ${response.status}`); }\r\n            const data = await response.json();\r\n            setUserQuestions(data);\r\n        } catch (error) {\r\n            console.error('Error fetching questions:', error);\r\n            alert('Error fetching questions.');\r\n        }\r\n    };\r\n\r\n    const handleKeywordSearch = async () => {\r\n        console.log(`Searching for keyword '${keyword}' in user '${keywordSearchUsername}' questions.`);\r\n        if (!keywordSearchUsername || !keyword) {\r\n            alert('Please enter both a username and a keyword.');\r\n            return;\r\n        }\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/users/${keywordSearchUsername}/search?keyword=${keyword}`);\r\n            if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\r\n            const questions = await response.json();\r\n            setUserQuestions(questions);\r\n        } catch (error) {\r\n            alert('Error fetching questions by keyword.');\r\n            console.error('Error fetching questions:', error);\r\n        }\r\n    };\r\n\r\n    const handleDelete = async (questionId) => {\r\n        //Iryna added confirmation\r\n        const userConfirmed = window.confirm('Are you sure you want to delete this question from the quiz?')\r\n        if (!userConfirmed) {\r\n            return;\r\n        }\r\n        //Iryna end change\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/question/${questionId}`, {\r\n                method: 'DELETE',\r\n            });\r\n\r\n            if (!response.ok) { throw new Error(`HTTP error! Status: ${response.status}`); }\r\n\r\n            setUserQuestions(prevQuestions => prevQuestions.filter(question => question.id !== questionId));\r\n            alert('Question deleted successfully!');\r\n        } catch (error) {\r\n            console.error('Error deleting question:', error);\r\n            alert('Error deleting question.');\r\n        }\r\n    };\r\n\r\n    const handleEdit = (question) => {\r\n        setUsername(question.user.username);\r\n        setQuestionText(question.text);\r\n        setAnswers(question.answers);\r\n        const correctIndex = question.answers.findIndex(answer => answer.isCorrect);\r\n        setCorrectAnswerIndex(correctIndex);\r\n        setEditMode(true);\r\n        setEditQuestionId(question.id);\r\n    };\r\n\r\n    return (\r\n    <div>\r\n        <h2>Create a New Question</h2>\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <label>Username:</label>\r\n                <input type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)}/>\r\n            </div>\r\n            <div>\r\n                <label>Question:</label>\r\n                <input type=\"text\" value={questionText} onChange={(e) => setQuestionText(e.target.value)}/>\r\n            </div>\r\n            {answers.map((answer, index) => (\r\n                    <div key={index}>\r\n                        <label>\r\n                            Answer {index + 1}:\r\n                            <input type=\"text\" value={answer.text} onChange={(e) => handleAnswerChange(index, e)} />\r\n                        </label>\r\n                        <label>\r\n                            Correct\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                checked={index === correctAnswerIndex}\r\n                                onChange={() => handleCorrectAnswerChange(index)}\r\n                            />\r\n                        </label>\r\n                    </div>\r\n                ))}\r\n                <button type=\"submit\">Save Question</button>\r\n            </form>\r\n\r\n            <div>\r\n                <h2>Search Questions by Username</h2>\r\n                <input\r\n                    type=\"text\"\r\n                    value={searchUsername}\r\n                    onChange={(e) => setSearchUsername(e.target.value)}\r\n                    placeholder=\"Username\"\r\n                />\r\n                <button type=\"button\" onClick={handleSearch}>Search</button>\r\n\r\n                <div>\r\n                    <h2>Search by Keyword</h2>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={keywordSearchUsername}\r\n                        onChange={(e) => setKeywordSearchUsername(e.target.value)}\r\n                        placeholder=\"Username for Keyword Search\"\r\n                    />\r\n                    <input\r\n                        type=\"text\"\r\n                        value={keyword}\r\n                        onChange={(e) => setKeyword(e.target.value)}\r\n                        placeholder=\"Keyword\"\r\n                    />\r\n                    <button type=\"button\" onClick={handleKeywordSearch}>Search Keyword</button>\r\n                </div>\r\n\r\n                <div>\r\n                    <h3>Search Results</h3>\r\n                    {userQuestions.map((question, index) => (\r\n                        <div key={index} className=\"question-item\">\r\n                            <div className=\"question-content\">\r\n                                <h3>Question {index + 1}</h3>\r\n                                <p>Question Text: {question.text}</p>\r\n                                <p>Question User: {question.user.username}</p>\r\n                                <h4>Answers:</h4>\r\n                                <ul>\r\n                                    {question.answers.map((answer, ansIndex) => (\r\n                                        <li key={ansIndex}>\r\n                                            Answer {ansIndex + 1}: {answer.text}\r\n                                            {answer.isCorrect ? ' (Correct)' : ''}\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                            <div className=\"question-actions\">\r\n\r\n                                <button onClick={() => handleEdit(question)} className=\"question-button edit-button\">Edit</button>\r\n\r\n                                <button onClick={() => handleDelete(question.id)} className=\"question-button delete-button\">Delete</button>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QuestionForm;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/components/QuestionForm.js b/client/src/components/QuestionForm.js
--- a/client/src/components/QuestionForm.js	(revision 55779d743e046c39dc482aae7d3d12a891383162)
+++ b/client/src/components/QuestionForm.js	(date 1705536574365)
@@ -1,20 +1,31 @@
-import React, {useEffect, useState} from 'react';
+import React, { useEffect, useState } from 'react';
 import './QuestionForm.css';
-import axios from "axios";
-import {useNavigate, useParams} from "react-router-dom";
+import apiClient from '../components/ApiClient'; // Make sure to import apiClient
+import { useParams } from "react-router-dom";
 
 function QuestionForm() {
-    const [username, setUsername] = useState('');
     const [questionText, setQuestionText] = useState('');
     const [answers, setAnswers] = useState(new Array(4).fill({ text: '', isCorrect: false }));
     const [correctAnswerIndex, setCorrectAnswerIndex] = useState(-1);
     const [userQuestions, setUserQuestions] = useState([]);
-    const [searchUsername, setSearchUsername] = useState('');
-    const {quizId} = useParams();
+    const { quizId } = useParams();
     const [keyword, setKeyword] = useState('');
     const [editMode, setEditMode] = useState(false);
     const [editQuestionId, setEditQuestionId] = useState(null);
-    const [keywordSearchUsername, setKeywordSearchUsername] = useState('');
+
+    useEffect(() => {
+        fetchUserQuestions();
+    }, []);
+
+    const fetchUserQuestions = async () => {
+        try {
+            const response = await apiClient.get('http://localhost:8080/question/my-questions');
+            setUserQuestions(response.data);
+        } catch (error) {
+            console.error('Error fetching questions:', error);
+            alert('Error fetching questions.');
+        }
+    };
 
     const handleAnswerChange = (index, event) => {
         const newAnswers = answers.map((answer, i) => {
@@ -38,69 +49,48 @@
     const handleSubmit = async (event) => {
         event.preventDefault();
 
-        if (!username || !questionText || answers.some(answer => !answer.text)) {
+        if (!questionText || answers.some(answer => !answer.text)) {
             alert('Please fill out all fields.');
             return;
         }
 
-        //Iryna added validation for correct answer checked
         if (correctAnswerIndex === -1) {
             alert('Please select at least one correct answer.');
             return;
         }
 
         const questionData = {
-            user: { username },
             text: questionText,
             answers
         };
 
         try {
-            //Iryna changed
-            const response =  axios.post('http://localhost:8080/question', questionData)
-                // Iryna added
-                .then(responseData => {
-                    if (responseData.data != null && responseData.data.id !=null){
-                        if (quizId !=null) {
-                            axios.post(`/quiz/addQuestion/${quizId}`, responseData.data.id.toString());
-                        }
-                    }
-                });
-            //Iryna end
+            const response = await apiClient.post('http://localhost:8080/question', questionData);
+            if (response.data && response.data.id) {
+                if (quizId) {
+                    await apiClient.post(`/quiz/addQuestion/${quizId}`, response.data.id.toString());
+                }
+            }
 
             alert('Question saved successfully!');
-            setUsername('');
             setQuestionText('');
             setAnswers(new Array(4).fill({ text: '', isCorrect: false }));
             setCorrectAnswerIndex(-1);
+            fetchUserQuestions();
         } catch (error) {
             console.error('There was an error saving the question:', error);
             alert('Error saving question.');
         }
     };
-    const handleSearch = async () => {
-        try {
-            const response = await fetch(`http://localhost:8080/users/${searchUsername}/questions`);
-            if (!response.ok) { throw new Error(`HTTP error! Status: ${response.status}`); }
-            const data = await response.json();
-            setUserQuestions(data);
-        } catch (error) {
-            console.error('Error fetching questions:', error);
-            alert('Error fetching questions.');
-        }
-    };
 
     const handleKeywordSearch = async () => {
-        console.log(`Searching for keyword '${keyword}' in user '${keywordSearchUsername}' questions.`);
-        if (!keywordSearchUsername || !keyword) {
-            alert('Please enter both a username and a keyword.');
+        if (!keyword) {
+            alert('Please enter a keyword.');
             return;
         }
         try {
-            const response = await fetch(`http://localhost:8080/users/${keywordSearchUsername}/search?keyword=${keyword}`);
-            if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
-            const questions = await response.json();
-            setUserQuestions(questions);
+            const response = await apiClient.get(`http://localhost:8080/question/search?keyword=${keyword}`);
+            setUserQuestions(response.data);
         } catch (error) {
             alert('Error fetching questions by keyword.');
             console.error('Error fetching questions:', error);
@@ -108,19 +98,13 @@
     };
 
     const handleDelete = async (questionId) => {
-        //Iryna added confirmation
-        const userConfirmed = window.confirm('Are you sure you want to delete this question from the quiz?')
+        const userConfirmed = window.confirm('Are you sure you want to delete this question?')
         if (!userConfirmed) {
             return;
         }
-        //Iryna end change
+
         try {
-            const response = await fetch(`http://localhost:8080/question/${questionId}`, {
-                method: 'DELETE',
-            });
-
-            if (!response.ok) { throw new Error(`HTTP error! Status: ${response.status}`); }
-
+            await apiClient.delete(`http://localhost:8080/question/${questionId}`);
             setUserQuestions(prevQuestions => prevQuestions.filter(question => question.id !== questionId));
             alert('Question deleted successfully!');
         } catch (error) {
@@ -130,7 +114,6 @@
     };
 
     const handleEdit = (question) => {
-        setUsername(question.user.username);
         setQuestionText(question.text);
         setAnswers(question.answers);
         const correctIndex = question.answers.findIndex(answer => answer.isCorrect);
@@ -140,18 +123,14 @@
     };
 
     return (
-    <div>
-        <h2>Create a New Question</h2>
-        <form onSubmit={handleSubmit}>
-            <div>
-                <label>Username:</label>
-                <input type="text" value={username} onChange={(e) => setUsername(e.target.value)}/>
-            </div>
-            <div>
-                <label>Question:</label>
-                <input type="text" value={questionText} onChange={(e) => setQuestionText(e.target.value)}/>
-            </div>
-            {answers.map((answer, index) => (
+        <div>
+            <h2>Create a New Question</h2>
+            <form onSubmit={handleSubmit}>
+                <div>
+                    <label>Question:</label>
+                    <input type="text" value={questionText} onChange={(e) => setQuestionText(e.target.value)} />
+                </div>
+                {answers.map((answer, index) => (
                     <div key={index}>
                         <label>
                             Answer {index + 1}:
@@ -171,59 +150,39 @@
             </form>
 
             <div>
-                <h2>Search Questions by Username</h2>
-                <input
-                    type="text"
-                    value={searchUsername}
-                    onChange={(e) => setSearchUsername(e.target.value)}
-                    placeholder="Username"
-                />
-                <button type="button" onClick={handleSearch}>Search</button>
-
-                <div>
-                    <h2>Search by Keyword</h2>
-                    <input
-                        type="text"
-                        value={keywordSearchUsername}
-                        onChange={(e) => setKeywordSearchUsername(e.target.value)}
-                        placeholder="Username for Keyword Search"
-                    />
-                    <input
-                        type="text"
-                        value={keyword}
-                        onChange={(e) => setKeyword(e.target.value)}
-                        placeholder="Keyword"
-                    />
-                    <button type="button" onClick={handleKeywordSearch}>Search Keyword</button>
-                </div>
-
-                <div>
-                    <h3>Search Results</h3>
-                    {userQuestions.map((question, index) => (
-                        <div key={index} className="question-item">
-                            <div className="question-content">
-                                <h3>Question {index + 1}</h3>
-                                <p>Question Text: {question.text}</p>
-                                <p>Question User: {question.user.username}</p>
-                                <h4>Answers:</h4>
-                                <ul>
-                                    {question.answers.map((answer, ansIndex) => (
-                                        <li key={ansIndex}>
-                                            Answer {ansIndex + 1}: {answer.text}
-                                            {answer.isCorrect ? ' (Correct)' : ''}
-                                        </li>
-                                    ))}
-                                </ul>
-                            </div>
-                            <div className="question-actions">
-
-                                <button onClick={() => handleEdit(question)} className="question-button edit-button">Edit</button>
-
-                                <button onClick={() => handleDelete(question.id)} className="question-button delete-button">Delete</button>
-                            </div>
-                        </div>
-                    ))}
-                </div>
+                <h2>My Questions</h2>
+                {userQuestions.map((question, index) => (
+                    <div key={index} className="question-item">
+                        <div className="question-content">
+                            <h3>Question {index + 1}</h3>
+                            <p>Question Text: {question.text}</p>
+                            <h4>Answers:</h4>
+                            <ul>
+                                {question.answers.map((answer, ansIndex) => (
+                                    <li key={ansIndex}>
+                                        Answer {ansIndex + 1}: {answer.text}
+                                        {answer.isCorrect ? ' (Correct)' : ''}
+                                    </li>
+                                ))}
+                            </ul>
+                        </div>
+                        <div className="question-actions">
+                            <button onClick={() => handleEdit(question)} className="question-button edit-button">Edit</button>
+                            <button onClick={() => handleDelete(question.id)} className="question-button delete-button">Delete</button>
+                        </div>
+                    </div>
+                ))}
+            </div>
+
+            <div>
+                <h2>Search by Keyword</h2>
+                <input
+                    type="text"
+                    value={keyword}
+                    onChange={(e) => setKeyword(e.target.value)}
+                    placeholder="Keyword"
+                />
+                <button type="button" onClick={handleKeywordSearch}>Search Keyword</button>
             </div>
         </div>
     );
